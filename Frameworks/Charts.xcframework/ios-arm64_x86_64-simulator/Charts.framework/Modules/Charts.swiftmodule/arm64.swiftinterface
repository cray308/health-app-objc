// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Charts
@_exported import Charts
import CoreGraphics
import QuartzCore
import Swift
import UIKit
@objc @_inheritsConvenienceInitializers public class LineChartView : UIKit.UIView, UIKit.UIGestureRecognizerDelegate {
  @objc public func setData(_ newData: Charts.LineChartData?, axisMax: Swift.Double)
  @objc public init(legendEntries: [Charts.LegendEntry], xFormatter: Charts.AxisValueFormatter, options: Swift.UInt8)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public func tintColorDidChange()
  @objc public func setLineLimit(_ newVal: Swift.Double)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  public func stopDeceleration()
  @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class ChartUtility : ObjectiveC.NSObject {
  @objc public class func setDarkMode(enabled: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class LineChartData : ObjectiveC.NSObject, Swift.ExpressibleByArrayLiteral {
  @objc required override dynamic public init()
  @objc public init(dataSets: [Charts.LineChartDataSet], options: Swift.UInt8)
  required public init(arrayLiteral elements: Charts.LineChartDataSet...)
  @objc deinit
  public typealias ArrayLiteralElement = Charts.LineChartDataSet
}
extension LineChartData : Swift.MutableCollection {
  public typealias Index = Swift.Int
  public typealias Element = Charts.LineChartDataSet
  public var startIndex: Charts.LineChartData.Index {
    get
  }
  public var endIndex: Charts.LineChartData.Index {
    get
  }
  public func index(after: Charts.LineChartData.Index) -> Charts.LineChartData.Index
  public subscript(position: Charts.LineChartData.Index) -> Charts.LineChartData.Element {
    get
    set
  }
  public typealias Iterator = Swift.IndexingIterator<Charts.LineChartData>
  public typealias SubSequence = Swift.Slice<Charts.LineChartData>
  public typealias Indices = Swift.Range<Charts.LineChartData.Index>
}
extension LineChartData : Swift.RandomAccessCollection {
  public func index(before: Charts.LineChartData.Index) -> Charts.LineChartData.Index
}
extension LineChartData {
  public func append(_ newElement: Charts.LineChartData.Element)
  public func remove(at position: Charts.LineChartData.Index) -> Charts.LineChartData.Element
  public func removeFirst() -> Charts.LineChartData.Element
  public func removeFirst(_ n: Swift.Int)
  public func removeLast() -> Charts.LineChartData.Element
  public func removeLast(_ n: Swift.Int)
  public func removeSubrange<R>(_ bounds: R) where R : Swift.RangeExpression, R.Bound == Charts.LineChartData.Index
  public func removeAll(keepingCapacity keepCapacity: Swift.Bool)
  public func replaceSubrange<C>(_ subrange: Swift.Range<Charts.LineChartData.Index>, with newElements: C) where C : Swift.Collection, C.Element == Charts.LineChartData.Element
}
extension LineChartData {
  public subscript(entry entry: Charts.ChartDataEntry) -> Charts.LineChartData.Element? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class LineChartDataSet : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  @objc public init(colorVal: Swift.Int, lineWidth: Swift.Int, options: Swift.UInt8, fillSet: Charts.LineChartDataSet?)
  @objc public func replaceEntries(_ entries: [Charts.ChartDataEntry])
  @objc deinit
}
extension LineChartDataSet : Swift.MutableCollection {
  public typealias Index = Swift.Int
  public typealias Element = Charts.ChartDataEntry
  public var startIndex: Charts.LineChartDataSet.Index {
    get
  }
  public var endIndex: Charts.LineChartDataSet.Index {
    get
  }
  public func index(after: Charts.LineChartDataSet.Index) -> Charts.LineChartDataSet.Index
  public subscript(position: Charts.LineChartDataSet.Index) -> Charts.LineChartDataSet.Element {
    get
    set
  }
  public typealias Iterator = Swift.IndexingIterator<Charts.LineChartDataSet>
  public typealias SubSequence = Swift.Slice<Charts.LineChartDataSet>
  public typealias Indices = Swift.Range<Charts.LineChartDataSet.Index>
}
extension LineChartDataSet : Swift.RandomAccessCollection {
  public func index(before: Charts.LineChartDataSet.Index) -> Charts.LineChartDataSet.Index
}
extension LineChartDataSet : Swift.RangeReplaceableCollection {
  public func append(_ newElement: Charts.LineChartDataSet.Element)
  public func remove(at position: Charts.LineChartDataSet.Index) -> Charts.LineChartDataSet.Element
  public func removeFirst() -> Charts.LineChartDataSet.Element
  public func removeFirst(_ n: Swift.Int)
  public func removeLast() -> Charts.LineChartDataSet.Element
  public func removeLast(_ n: Swift.Int)
  public func removeSubrange<R>(_ bounds: R) where R : Swift.RangeExpression, R.Bound == Charts.LineChartDataSet.Index
  public func removeAll(keepingCapacity keepCapacity: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class ChartDataEntry : ObjectiveC.NSObject {
  @objc override required dynamic public init()
  @objc public init(x: Swift.Double, y: Swift.Double)
  @objc deinit
}
extension ChartDataEntry {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class LegendEntry : ObjectiveC.NSObject {
  @objc override required dynamic public init()
  @objc public init(colorType: Swift.Int)
  @objc public var label: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AxisBase : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol AxisValueFormatter : AnyObject {
  @objc func stringForValue(_ value: Swift.Double, axis: Charts.AxisBase?) -> Swift.String
}
