// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef CHARTS_SWIFT_H
#define CHARTS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Charts",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC6Charts8Animator")
@interface Animator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6Charts16AnimatorDelegate_")
@protocol AnimatorDelegate
/// Called when the Animator has stepped.
- (void)animatorUpdated:(Animator * _Nonnull)animator;
/// Called when the Animator has stopped.
- (void)animatorStopped:(Animator * _Nonnull)animator;
@end

@class ViewPortHandler;

SWIFT_PROTOCOL("_TtP6Charts8Renderer_")
@protocol Renderer
/// the component that handles the drawing area of the chart and it’s offsets
@property (nonatomic, readonly, strong) ViewPortHandler * _Nonnull viewPortHandler;
@end

@class NSUIAccessibilityElement;
@class Highlight;
@protocol ChartDataProvider;
@class ChartViewBase;
@class ChartData;

SWIFT_PROTOCOL("_TtP6Charts12DataRenderer_")
@protocol DataRenderer <Renderer>
/// An array of accessibility elements that are presented to the ChartViewBase accessibility methods.
/// Note that the order of elements in this array determines the order in which they are presented and navigated by
/// Accessibility clients such as VoiceOver.
/// Renderers should ensure that the order of elements makes sense to a client presenting an audio-only interface to a user.
/// Subclasses should populate this array in drawData() or drawDataSet() to make the chart accessible.
@property (nonatomic, readonly, copy) NSArray<NSUIAccessibilityElement *> * _Nonnull accessibleChartElements;
@property (nonatomic, readonly, strong) Animator * _Nonnull animator;
- (void)drawDataWithContext:(CGContextRef _Nonnull)context;
- (void)drawValuesWithContext:(CGContextRef _Nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef _Nonnull)context;
/// Draws all highlight indicators for the values that are currently highlighted.
/// \param indices the highlighted values
///
- (void)drawHighlightedWithContext:(CGContextRef _Nonnull)context indices:(NSArray<Highlight *> * _Nonnull)indices;
/// An opportunity for initializing internal buffers used for rendering with a new size.
/// Since this might do memory allocations, it should only be called if necessary.
- (void)initBuffers SWIFT_METHOD_FAMILY(none);
- (BOOL)isDrawingValuesAllowedWithDataProvider:(id <ChartDataProvider> _Nullable)dataProvider SWIFT_WARN_UNUSED_RESULT;
/// Creates an <code>NSUIAccessibilityElement</code> that acts as the first and primary header describing a chart view.
/// \param chart The chartView object being described
///
/// \param data A non optional data source about the chart
///
/// \param defaultDescription A simple string describing the type/design of Chart.
///
///
/// returns:
/// A header <code>NSUIAccessibilityElement</code> that can be added to accessibleChartElements.
- (NSUIAccessibilityElement * _Nonnull)createAccessibleHeaderUsingChart:(ChartViewBase * _Nonnull)chart andData:(ChartData * _Nonnull)data withDefaultDescription:(NSString * _Nonnull)defaultDescription SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Charts34BarLineScatterCandleBubbleRenderer")
@interface BarLineScatterCandleBubbleRenderer : NSObject <DataRenderer>
@property (nonatomic, readonly, strong) ViewPortHandler * _Nonnull viewPortHandler;
@property (nonatomic, copy) NSArray<NSUIAccessibilityElement *> * _Nonnull accessibleChartElements;
@property (nonatomic, readonly, strong) Animator * _Nonnull animator;
- (void)drawDataWithContext:(CGContextRef _Nonnull)context;
- (void)drawValuesWithContext:(CGContextRef _Nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef _Nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef _Nonnull)context indices:(NSArray<Highlight *> * _Nonnull)indices;
- (void)initBuffers SWIFT_METHOD_FAMILY(none);
- (BOOL)isDrawingValuesAllowedWithDataProvider:(id <ChartDataProvider> _Nullable)dataProvider SWIFT_WARN_UNUSED_RESULT;
- (NSUIAccessibilityElement * _Nonnull)createAccessibleHeaderUsingChart:(ChartViewBase * _Nonnull)chart andData:(ChartData * _Nonnull)data withDefaultDescription:(NSString * _Nonnull)defaultDescription SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Charts30LineScatterCandleRadarRenderer")
@interface LineScatterCandleRadarRenderer : BarLineScatterCandleBubbleRenderer
@end


SWIFT_CLASS("_TtC6Charts17LineRadarRenderer")
@interface LineRadarRenderer : LineScatterCandleRadarRenderer
@end

@protocol LineChartDataProvider;

SWIFT_CLASS("_TtC6Charts17LineChartRenderer")
@interface LineChartRenderer : LineRadarRenderer
- (nonnull instancetype)initWithDataProvider:(id <LineChartDataProvider> _Nonnull)dataProvider animator:(Animator * _Nonnull)animator viewPortHandler:(ViewPortHandler * _Nonnull)viewPortHandler OBJC_DESIGNATED_INITIALIZER;
- (void)drawDataWithContext:(CGContextRef _Nonnull)context;
- (void)drawValuesWithContext:(CGContextRef _Nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef _Nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef _Nonnull)context indices:(NSArray<Highlight *> * _Nonnull)indices;
@end


SWIFT_CLASS("_TtC6Charts22AreaChartChartRenderer")
@interface AreaChartChartRenderer : LineChartRenderer
- (nonnull instancetype)initWithDataProvider:(id <LineChartDataProvider> _Nonnull)dataProvider animator:(Animator * _Nonnull)animator viewPortHandler:(ViewPortHandler * _Nonnull)viewPortHandler OBJC_DESIGNATED_INITIALIZER;
@end

@protocol LineChartDataSetProtocol;

/// Protocol for providing a custom logic to where the filling line of a LineDataSet should end. This of course only works if setFillEnabled(…) is set to true.
SWIFT_PROTOCOL("_TtP6Charts13FillFormatter_")
@protocol FillFormatter
///
/// returns:
/// The vertical (y-axis) position where the filled-line of the LineDataSet should end.
- (CGFloat)getFillLinePositionWithDataSet:(id <LineChartDataSetProtocol> _Nonnull)dataSet dataProvider:(id <LineChartDataProvider> _Nonnull)dataProvider SWIFT_WARN_UNUSED_RESULT;
@end

@class LineChartDataSet;

SWIFT_CLASS("_TtC6Charts18AreaChartFormatter")
@interface AreaChartFormatter : NSObject <FillFormatter>
- (nonnull instancetype)initWithBoundaryDataSet:(LineChartDataSet * _Nonnull)boundaryDataSet OBJC_DESIGNATED_INITIALIZER;
- (CGFloat)getFillLinePositionWithDataSet:(id <LineChartDataSetProtocol> _Nonnull)dataSet dataProvider:(id <LineChartDataProvider> _Nonnull)dataProvider SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class encapsulates everything both Axis, Legend and LimitLines have in common
SWIFT_CLASS("_TtC6Charts13ComponentBase")
@interface ComponentBase : NSObject
/// flag that indicates if this component is enabled or not
@property (nonatomic) BOOL enabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIFont;
@protocol AxisValueFormatter;
@class ChartLimitLine;

/// Base class for all axes
SWIFT_CLASS("_TtC6Charts8AxisBase")
@interface AxisBase : ComponentBase
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIFont * _Nonnull labelFont;
@property (nonatomic) CGFloat gridLineWidth;
/// When true, axis labels are controlled by the <code>granularity</code> property.
/// When false, axis values could possibly be repeated.
/// This could happen if two adjacent axis values are rounded to same value.
/// If using granularity this could be avoided by having fewer axis values visible.
@property (nonatomic) BOOL granularityEnabled;
/// if true, the set number of y-labels will be forced
@property (nonatomic) BOOL forceLabelsEnabled;
/// Sets the formatter to be used for formatting the axis labels.
/// If no formatter is set, the chart will automatically determine a reasonable formatting (concerning decimals) for all the values that are drawn inside the chart.
/// Use <code>nil</code> to use the formatter calculated by the chart.
@property (nonatomic, strong) id <AxisValueFormatter> _Nullable valueFormatter;
/// the number of label entries the axis should have
/// max = 25,
/// min = 2,
/// default = 6,
/// be aware that this number is not fixed and can only be approximated
@property (nonatomic) NSInteger labelCount;
/// Adds a new ChartLimitLine to this axis.
- (void)addLimitLine:(ChartLimitLine * _Nonnull)line;
/// The minimum value for this axis.
/// If set, this value will not be calculated automatically depending on the provided data.
/// Use <code>resetCustomAxisMin()</code> to undo this.
@property (nonatomic) double axisMinimum;
/// The maximum value for this axis.
/// If set, this value will not be calculated automatically depending on the provided data.
/// Use <code>resetCustomAxisMax()</code> to undo this.
@property (nonatomic) double axisMaximum;
@end


/// An interface for providing custom axis Strings.
SWIFT_PROTOCOL("_TtP6Charts18AxisValueFormatter_")
@protocol AxisValueFormatter
/// Called when a value from an axis is formatted before being drawn.
/// For performance reasons, avoid excessive calculations and memory allocations inside this method.
/// \param value the value that is currently being drawn
///
/// \param axis the axis that the value belongs to
///
///
/// returns:
/// The customized label that is drawn on the x-axis.
- (NSString * _Nonnull)stringForValue:(double)value axis:(AxisBase * _Nullable)axis SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6Charts17ChartDataProvider_")
@protocol ChartDataProvider
/// The minimum x-value of the chart, regardless of zoom or translation.
@property (nonatomic, readonly) double chartXMin;
/// The maximum x-value of the chart, regardless of zoom or translation.
@property (nonatomic, readonly) double chartXMax;
/// The minimum y-value of the chart, regardless of zoom or translation.
@property (nonatomic, readonly) double chartYMin;
/// The maximum y-value of the chart, regardless of zoom or translation.
@property (nonatomic, readonly) double chartYMax;
@property (nonatomic, readonly) CGFloat maxHighlightDistance;
@property (nonatomic, readonly) double xRange;
@property (nonatomic, readonly) CGPoint centerOffsets;
@property (nonatomic, readonly, strong) ChartData * _Nullable data;
@property (nonatomic, readonly) NSInteger maxVisibleCount;
@end

enum AxisDependency : NSInteger;
@class Transformer;

SWIFT_PROTOCOL("_TtP6Charts43BarLineScatterCandleBubbleChartDataProvider_")
@protocol BarLineScatterCandleBubbleChartDataProvider <ChartDataProvider>
- (Transformer * _Nonnull)getTransformerForAxis:(enum AxisDependency)forAxis SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInvertedWithAxis:(enum AxisDependency)axis SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) double lowestVisibleX;
@property (nonatomic, readonly) double highestVisibleX;
@end

@class NSCoder;

SWIFT_CLASS("_TtC6Charts8NSUIView")
@interface NSUIView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class XAxis;
@class Legend;
@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC6Charts13ChartViewBase")
@interface ChartViewBase : NSUIView <AnimatorDelegate, ChartDataProvider>
/// object that holds all data that was originally set for the chart, before it was modified or any filtering algorithms had been applied
@property (nonatomic, strong) ChartData * _Nullable data;
/// The object representing the labels on the x-axis
@property (nonatomic, readonly, strong) XAxis * _Nonnull xAxis;
/// The legend object containing all data associated with the legend
@property (nonatomic, readonly, strong) Legend * _Nonnull legend;
/// text that is displayed when the chart is empty
@property (nonatomic, copy) NSString * _Nonnull noDataText;
/// object responsible for rendering the data
@property (nonatomic, strong) id <DataRenderer> _Nullable renderer;
/// The ViewPortHandler of the chart that is responsible for the
/// content area of the chart and its offsets and dimensions.
@property (nonatomic, readonly, strong) ViewPortHandler * _Nonnull viewPortHandler;
/// The animator responsible for animating chart values.
@property (nonatomic, readonly, strong) Animator * _Nonnull chartAnimator;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Lets the chart know its underlying data has changed and should perform all necessary recalculations.
/// It is crucial that this method is called everytime data is changed dynamically. Not calling this method can lead to crashes or unexpected behaviour.
- (void)notifyDataSetChanged;
- (void)drawRect:(CGRect)rect;
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.
/// If <code>animate(...)</code> is called, no further calling of <code>invalidate()</code> is necessary to refresh the chart.
/// \param xAxisDuration duration for animating the x axis
///
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration;
/// The current y-max value across all DataSets
@property (nonatomic, readonly) double chartYMax;
/// The current y-min value across all DataSets
@property (nonatomic, readonly) double chartYMin;
@property (nonatomic, readonly) double chartXMax;
@property (nonatomic, readonly) double chartXMin;
@property (nonatomic, readonly) double xRange;
/// The center of the chart taking offsets under consideration. (returns the center of the content rectangle)
@property (nonatomic, readonly) CGPoint centerOffsets;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/// The maximum distance in screen pixels away from an entry causing it to highlight.
/// <em>default</em>: 500.0
@property (nonatomic) CGFloat maxHighlightDistance;
/// the number of maximum visible drawn values on the chart only active when <code>drawValuesEnabled</code> is enabled
@property (nonatomic, readonly) NSInteger maxVisibleCount;
- (void)animatorUpdated:(Animator * _Nonnull)chartAnimator;
- (void)animatorStopped:(Animator * _Nonnull)chartAnimator;
- (void)nsuiTouchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;
@end

@class YAxis;
@class UIGestureRecognizer;

/// Base-class of LineChart, BarChart, ScatterChart and CandleStickChart.
SWIFT_CLASS("_TtC6Charts20BarLineChartViewBase")
@interface BarLineChartViewBase : ChartViewBase <BarLineScatterCandleBubbleChartDataProvider, UIGestureRecognizerDelegate>
/// The left y-axis object. In the horizontal bar-chart, this is the
/// top axis.
@property (nonatomic, readonly, strong) YAxis * _Nonnull leftAxis;
/// The right y-axis object. In the horizontal bar-chart, this is the
/// bottom axis.
@property (nonatomic, readonly, strong) YAxis * _Nonnull rightAxis;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)drawRect:(CGRect)rect;
- (void)notifyDataSetChanged;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The y-axis object to the corresponding AxisDependency. In the
/// horizontal bar-chart, LEFT == top, RIGHT == BOTTOM
- (YAxis * _Nonnull)getAxis:(enum AxisDependency)axis SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) double chartYMax;
@property (nonatomic, readonly) double chartYMin;
///
/// returns:
/// The Transformer class that contains all matrices and is
/// responsible for transforming values into pixels on the screen and
/// backwards.
- (Transformer * _Nonnull)getTransformerForAxis:(enum AxisDependency)axis SWIFT_WARN_UNUSED_RESULT;
/// the number of maximum visible drawn values on the chart only active when <code>drawValuesEnabled</code> is enabled
@property (nonatomic) NSInteger maxVisibleCount;
- (BOOL)isInvertedWithAxis:(enum AxisDependency)axis SWIFT_WARN_UNUSED_RESULT;
/// The lowest x-index (value on the x-axis) that is still visible on he chart.
@property (nonatomic, readonly) double lowestVisibleX;
/// The highest x-index (value on the x-axis) that is still visible on the chart.
@property (nonatomic, readonly) double highestVisibleX;
@end


@class ChartDataEntry;
enum ChartDataSetRounding : NSInteger;
@class UIColor;
@protocol ValueFormatter;
enum LegendForm : NSInteger;

SWIFT_PROTOCOL("_TtP6Charts20ChartDataSetProtocol_")
@protocol ChartDataSetProtocol
/// Use this method to tell the data set that the underlying data has changed
- (void)notifyDataSetChanged;
/// Calculates the minimum and maximum x and y values (xMin, xMax, yMin, yMax).
- (void)calcMinMax;
/// Calculates the min and max y-values from the Entry closest to the given fromX to the Entry closest to the given toX value.
/// This is only needed for the autoScaleMinMax feature.
- (void)calcMinMaxYFromX:(double)fromX toX:(double)toX;
/// The minimum y-value this DataSet holds
@property (nonatomic, readonly) double yMin;
/// The maximum y-value this DataSet holds
@property (nonatomic, readonly) double yMax;
/// The minimum x-value this DataSet holds
@property (nonatomic, readonly) double xMin;
/// The maximum x-value this DataSet holds
@property (nonatomic, readonly) double xMax;
/// The number of y-values this DataSet represents
@property (nonatomic, readonly) NSInteger entryCount;
///
/// throws:
/// out of bounds
/// if <code>i</code> is out of bounds, it may throw an out-of-bounds exception
///
/// returns:
/// The entry object found at the given index (not x-value!)
- (ChartDataEntry * _Nullable)entryForIndex:(NSInteger)i SWIFT_WARN_UNUSED_RESULT;
/// \param xValue the x-value
///
/// \param closestToY If there are multiple y-values for the specified x-value,
///
/// \param rounding determine whether to round up/down/closest if there is no Entry matching the provided x-value
///
///
/// returns:
/// The first Entry object found at the given x-value with binary search.
/// If the no Entry at the specified x-value is found, this method returns the Entry at the closest x-value according to the rounding.
/// nil if no Entry object at that x-value.
- (ChartDataEntry * _Nullable)entryForXValue:(double)xValue closestToY:(double)yValue rounding:(enum ChartDataSetRounding)rounding SWIFT_WARN_UNUSED_RESULT;
/// \param xValue the x-value
///
/// \param closestToY If there are multiple y-values for the specified x-value,
///
///
/// returns:
/// The first Entry object found at the given x-value with binary search.
/// If the no Entry at the specified x-value is found, this method returns the Entry at the closest x-value.
/// nil if no Entry object at that x-value.
- (ChartDataEntry * _Nullable)entryForXValue:(double)xValue closestToY:(double)yValue SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// All Entry objects found at the given x-value with binary search.
/// An empty array if no Entry object at that x-value.
- (NSArray<ChartDataEntry *> * _Nonnull)entriesForXValue:(double)xValue SWIFT_WARN_UNUSED_RESULT;
/// \param xValue x-value of the entry to search for
///
/// \param closestToY If there are multiple y-values for the specified x-value,
///
/// \param rounding Rounding method if exact value was not found
///
///
/// returns:
/// The array-index of the specified entry.
/// If the no Entry at the specified x-value is found, this method returns the index of the Entry at the closest x-value according to the rounding.
- (NSInteger)entryIndexWithX:(double)xValue closestToY:(double)yValue rounding:(enum ChartDataSetRounding)rounding SWIFT_WARN_UNUSED_RESULT;
/// \param e the entry to search for
///
///
/// returns:
/// The array-index of the specified entry
- (NSInteger)entryIndexWithEntry:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
/// Adds an Entry to the DataSet dynamically.
/// <em>optional feature, can return <code>false</code> ifnot implemented</em>
/// Entries are added to the end of the list.
/// \param e the entry to add
///
///
/// returns:
/// <code>true</code> if the entry was added successfully, <code>false</code> ifthis feature is not supported
- (BOOL)addEntry:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
/// Adds an Entry to the DataSet dynamically.
/// Entries are added to their appropriate index in the values array respective to their x-position.
/// This will also recalculate the current minimum and maximum values of the DataSet and the value-sum.
/// <em>optional feature, can return <code>false</code> ifnot implemented</em>
/// Entries are added to the end of the list.
/// \param e the entry to add
///
///
/// returns:
/// <code>true</code> if the entry was added successfully, <code>false</code> ifthis feature is not supported
- (BOOL)addEntryOrdered:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
/// Removes an Entry from the DataSet dynamically.
/// <em>optional feature, can return <code>false</code> ifnot implemented</em>
/// \param entry the entry to remove
///
///
/// returns:
/// <code>true</code> if the entry was removed successfully, <code>false</code> ifthe entry does not exist or if this feature is not supported
- (BOOL)removeEntry:(ChartDataEntry * _Nonnull)entry SWIFT_WARN_UNUSED_RESULT;
/// Removes the Entry object at the given index in the values array from the DataSet.
/// <em>optional feature, can return <code>false</code> ifnot implemented</em>
/// \param index the index of the entry to remove
///
///
/// returns:
/// <code>true</code> if the entry was removed successfully, <code>false</code> ifthe entry does not exist or if this feature is not supported
- (BOOL)removeEntryWithIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Removes the Entry object closest to the given x-value from the DataSet.
/// <em>optional feature, can return <code>false</code> ifnot implemented</em>
/// \param x the x-value to remove
///
///
/// returns:
/// <code>true</code> if the entry was removed successfully, <code>false</code> ifthe entry does not exist or if this feature is not supported
- (BOOL)removeEntryWithX:(double)x SWIFT_WARN_UNUSED_RESULT;
/// Removes the first Entry (at index 0) of this DataSet from the entries array.
/// <em>optional feature, can return <code>false</code> ifnot implemented</em>
///
/// returns:
/// <code>true</code> if the entry was removed successfully, <code>false</code> ifthe entry does not exist or if this feature is not supported
- (BOOL)removeFirst SWIFT_WARN_UNUSED_RESULT;
/// Removes the last Entry (at index 0) of this DataSet from the entries array.
/// <em>optional feature, can return <code>false</code> ifnot implemented</em>
///
/// returns:
/// <code>true</code> if the entry was removed successfully, <code>false</code> ifthe entry does not exist or if this feature is not supported
- (BOOL)removeLast SWIFT_WARN_UNUSED_RESULT;
/// Checks if this DataSet contains the specified Entry.
///
/// returns:
/// <code>true</code> if contains the entry, <code>false</code> ifnot.
- (BOOL)contains:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
/// Removes all values from this DataSet and does all necessary recalculations.
/// <em>optional feature, could throw if not implemented</em>
- (void)clear;
/// The label string that describes the DataSet.
@property (nonatomic, readonly, copy) NSString * _Nullable label;
/// The axis this DataSet should be plotted against.
@property (nonatomic, readonly) enum AxisDependency axisDependency;
/// List representing all colors that are used for drawing the actual values for this DataSet
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nonnull valueColors;
/// All the colors that are used for this DataSet.
/// Colors are reused as soon as the number of Entries the DataSet represents is higher than the size of the colors array.
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nonnull colors;
///
/// returns:
/// The color at the given index of the DataSet’s color array.
/// This prevents out-of-bounds by performing a modulus on the color index, so colours will repeat themselves.
- (UIColor * _Nonnull)colorAtIndex:(NSInteger)atIndex SWIFT_WARN_UNUSED_RESULT;
- (void)resetColors;
- (void)addColor:(UIColor * _Nonnull)color;
- (void)setColor:(UIColor * _Nonnull)color;
/// if true, value highlighting is enabled
@property (nonatomic) BOOL highlightEnabled;
/// <code>true</code> if value highlighting is enabled for this dataset
@property (nonatomic, readonly) BOOL isHighlightEnabled;
/// Custom formatter that is used instead of the auto-formatter if set
@property (nonatomic, strong) id <ValueFormatter> _Nonnull valueFormatter;
/// Sets/get a single color for value text.
/// Setting the color clears the colors array and adds a single color.
/// Getting will return the first color in the array.
@property (nonatomic, strong) UIColor * _Nonnull valueTextColor;
///
/// returns:
/// The color at the specified index that is used for drawing the values inside the chart. Uses modulus internally.
- (UIColor * _Nonnull)valueTextColorAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// the font for the value-text labels
@property (nonatomic, strong) UIFont * _Nonnull valueFont;
/// The rotation angle (in degrees) for value-text labels
@property (nonatomic) CGFloat valueLabelAngle;
/// The form to draw for this dataset in the legend.
/// Return <code>.Default</code> to use the default legend form.
@property (nonatomic, readonly) enum LegendForm form;
/// The form size to draw for this dataset in the legend.
/// Return <code>NaN</code> to use the default legend form size.
@property (nonatomic, readonly) CGFloat formSize;
/// The line width for drawing the form of this dataset in the legend
/// Return <code>NaN</code> to use the default legend form line width.
@property (nonatomic, readonly) CGFloat formLineWidth;
/// Line dash configuration for legend shapes that consist of lines.
/// This is how much (in pixels) into the dash pattern are we starting from.
@property (nonatomic, readonly) CGFloat formLineDashPhase;
/// Line dash configuration for legend shapes that consist of lines.
/// This is the actual dash pattern.
/// I.e. [2, 3] will paint [–   –   ]
/// [1, 3, 4, 2] will paint [-   ––  -   ––  ]
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable formLineDashLengths;
/// Set this to true to draw y-values on the chart.
/// note:
/// For bar and line charts: if <code>maxVisibleCount</code> is reached, no values will be drawn even if this is enabled.
@property (nonatomic) BOOL drawValuesEnabled;
/// <code>true</code> if y-value drawing is enabled, <code>false</code> ifnot
@property (nonatomic, readonly) BOOL isDrawValuesEnabled;
/// Set this to true to draw y-icons on the chart
/// note:
/// For bar and line charts: if <code>maxVisibleCount</code> is reached, no icons will be drawn even if this is enabled.
@property (nonatomic) BOOL drawIconsEnabled;
/// Returns true if y-icon drawing is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawIconsEnabled;
/// Offset of icons drawn on the chart.
/// For all charts except Pie and Radar it will be ordinary (x offset, y offset).
/// For Pie and Radar chart it will be (y offset, distance from center offset); so if you want icon to be rendered under value, you should increase X component of CGPoint, and if you want icon to be rendered closet to center, you should decrease height component of CGPoint.
@property (nonatomic) CGPoint iconsOffset;
/// Set the visibility of this DataSet. If not visible, the DataSet will not be drawn to the chart upon refreshing it.
@property (nonatomic) BOOL visible;
/// <code>true</code> if this DataSet is visible inside the chart, or <code>false</code> ifit is currently hidden.
@property (nonatomic, readonly) BOOL isVisible;
@end


SWIFT_PROTOCOL("_TtP6Charts46BarLineScatterCandleBubbleChartDataSetProtocol_")
@protocol BarLineScatterCandleBubbleChartDataSetProtocol <ChartDataSetProtocol>
@property (nonatomic, strong) UIColor * _Nonnull highlightColor;
@property (nonatomic) CGFloat highlightLineWidth;
@property (nonatomic) CGFloat highlightLineDashPhase;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable highlightLineDashLengths;
@end


SWIFT_CLASS("_TtC6Charts16ChartBaseDataSet")
@interface ChartBaseDataSet : NSObject <ChartDataSetProtocol, NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Use this method to tell the data set that the underlying data has changed
- (void)notifyDataSetChanged;
- (void)calcMinMax;
- (void)calcMinMaxYFromX:(double)fromX toX:(double)toX;
@property (nonatomic, readonly) double yMin;
@property (nonatomic, readonly) double yMax;
@property (nonatomic, readonly) double xMin;
@property (nonatomic, readonly) double xMax;
@property (nonatomic, readonly) NSInteger entryCount;
- (ChartDataEntry * _Nullable)entryForIndex:(NSInteger)i SWIFT_WARN_UNUSED_RESULT;
- (ChartDataEntry * _Nullable)entryForXValue:(double)x closestToY:(double)y rounding:(enum ChartDataSetRounding)rounding SWIFT_WARN_UNUSED_RESULT;
- (ChartDataEntry * _Nullable)entryForXValue:(double)x closestToY:(double)y SWIFT_WARN_UNUSED_RESULT;
- (NSArray<ChartDataEntry *> * _Nonnull)entriesForXValue:(double)x SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)entryIndexWithX:(double)xValue closestToY:(double)y rounding:(enum ChartDataSetRounding)rounding SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)entryIndexWithEntry:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addEntry:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addEntryOrdered:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeEntry:(ChartDataEntry * _Nonnull)entry;
- (BOOL)removeEntryWithIndex:(NSInteger)index;
- (BOOL)removeEntryWithX:(double)x;
- (BOOL)removeFirst;
- (BOOL)removeLast;
- (BOOL)contains:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
- (void)clear;
/// All the colors that are used for this DataSet.
/// Colors are reused as soon as the number of Entries the DataSet represents is higher than the size of the colors array.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull colors;
/// List representing all colors that are used for drawing the actual values for this DataSet
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull valueColors;
/// The label string that describes the DataSet.
@property (nonatomic, copy) NSString * _Nullable label;
/// The axis this DataSet should be plotted against.
@property (nonatomic) enum AxisDependency axisDependency;
///
/// returns:
/// The color at the given index of the DataSet’s color array.
/// This prevents out-of-bounds by performing a modulus on the color index, so colours will repeat themselves.
- (UIColor * _Nonnull)colorAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Resets all colors of this DataSet and recreates the colors array.
- (void)resetColors;
/// Adds a new color to the colors array of the DataSet.
/// \param color the color to add
///
- (void)addColor:(UIColor * _Nonnull)color;
/// Sets the one and <em>only</em> color that should be used for this DataSet.
/// Internally, this recreates the colors array and adds the specified color.
/// \param color the color to set
///
- (void)setColor:(UIColor * _Nonnull)color;
/// if true, value highlighting is enabled
@property (nonatomic) BOOL highlightEnabled;
/// <code>true</code> if value highlighting is enabled for this dataset
@property (nonatomic, readonly) BOOL isHighlightEnabled;
/// Custom formatter that is used instead of the auto-formatter if set
@property (nonatomic, strong) id <ValueFormatter> _Nonnull valueFormatter;
/// Sets/get a single color for value text.
/// Setting the color clears the colors array and adds a single color.
/// Getting will return the first color in the array.
@property (nonatomic, strong) UIColor * _Nonnull valueTextColor;
///
/// returns:
/// The color at the specified index that is used for drawing the values inside the chart. Uses modulus internally.
- (UIColor * _Nonnull)valueTextColorAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// the font for the value-text labels
@property (nonatomic, strong) UIFont * _Nonnull valueFont;
/// The rotation angle (in degrees) for value-text labels
@property (nonatomic) CGFloat valueLabelAngle;
/// The form to draw for this dataset in the legend.
@property (nonatomic) enum LegendForm form;
/// The form size to draw for this dataset in the legend.
/// Return <code>NaN</code> to use the default legend form size.
@property (nonatomic) CGFloat formSize;
/// The line width for drawing the form of this dataset in the legend
/// Return <code>NaN</code> to use the default legend form line width.
@property (nonatomic) CGFloat formLineWidth;
/// Line dash configuration for legend shapes that consist of lines.
/// This is how much (in pixels) into the dash pattern are we starting from.
@property (nonatomic) CGFloat formLineDashPhase;
/// Line dash configuration for legend shapes that consist of lines.
/// This is the actual dash pattern.
/// I.e. [2, 3] will paint [–   –   ]
/// [1, 3, 4, 2] will paint [-   ––  -   ––  ]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable formLineDashLengths;
/// Set this to true to draw y-values on the chart.
/// note:
/// For bar and line charts: if <code>maxVisibleCount</code> is reached, no values will be drawn even if this is enabled.
@property (nonatomic) BOOL drawValuesEnabled;
/// <code>true</code> if y-value drawing is enabled, <code>false</code> ifnot
@property (nonatomic, readonly) BOOL isDrawValuesEnabled;
/// Set this to true to draw y-icons on the chart.
/// note:
/// For bar and line charts: if <code>maxVisibleCount</code> is reached, no icons will be drawn even if this is enabled.
@property (nonatomic) BOOL drawIconsEnabled;
/// Returns true if y-icon drawing is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawIconsEnabled;
/// Offset of icons drawn on the chart.
/// For all charts except Pie and Radar it will be ordinary (x offset, y offset).
/// For Pie and Radar chart it will be (y offset, distance from center offset); so if you want icon to be rendered under value, you should increase X component of CGPoint, and if you want icon to be rendered closet to center, you should decrease height component of CGPoint.
@property (nonatomic) CGPoint iconsOffset;
/// Set the visibility of this DataSet. If not visible, the DataSet will not be drawn to the chart upon refreshing it.
@property (nonatomic) BOOL visible;
/// <code>true</code> if this DataSet is visible inside the chart, or <code>false</code> ifit is currently hidden.
@property (nonatomic, readonly) BOOL isVisible;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// The DataSet class represents one group or type of entries (Entry) in the Chart that belong together.
/// It is designed to logically separate different groups of values inside the Chart (e.g. the values for a specific line in the LineChart, or the values of a specific group of bars in the BarChart).
SWIFT_CLASS("_TtC6Charts12ChartDataSet")
@interface ChartDataSet : ChartBaseDataSet
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEntries:(NSArray<ChartDataEntry *> * _Nonnull)entries;
/// Used to replace all entries of a data set while retaining styling properties.
/// This is a separate method from a setter on <code>entries</code> to encourage usage
/// of <code>Collection</code> conformances.
/// \param entries new entries to replace existing entries in the dataset
///
- (void)replaceEntries:(NSArray<ChartDataEntry *> * _Nonnull)entries;
- (void)calcMinMax;
- (void)calcMinMaxYFromX:(double)fromX toX:(double)toX;
/// The minimum y-value this DataSet holds
@property (nonatomic, readonly) double yMin;
/// The maximum y-value this DataSet holds
@property (nonatomic, readonly) double yMax;
/// The minimum x-value this DataSet holds
@property (nonatomic, readonly) double xMin;
/// The maximum x-value this DataSet holds
@property (nonatomic, readonly) double xMax;
/// The number of y-values this DataSet represents
@property (nonatomic, readonly) NSInteger entryCount SWIFT_DEPRECATED_MSG("Use `count` instead");
///
/// throws:
/// out of bounds
/// if <code>i</code> is out of bounds, it may throw an out-of-bounds exception
///
/// returns:
/// The entry object found at the given index (not x-value!)
- (ChartDataEntry * _Nullable)entryForIndex:(NSInteger)i SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `subscript(index:)` instead.");
/// \param xValue the x-value
///
/// \param closestToY If there are multiple y-values for the specified x-value,
///
/// \param rounding determine whether to round up/down/closest if there is no Entry matching the provided x-value
///
///
/// returns:
/// The first Entry object found at the given x-value with binary search.
/// If the no Entry at the specified x-value is found, this method returns the Entry at the closest x-value according to the rounding.
/// nil if no Entry object at that x-value.
- (ChartDataEntry * _Nullable)entryForXValue:(double)xValue closestToY:(double)yValue rounding:(enum ChartDataSetRounding)rounding SWIFT_WARN_UNUSED_RESULT;
/// \param xValue the x-value
///
/// \param closestToY If there are multiple y-values for the specified x-value,
///
///
/// returns:
/// The first Entry object found at the given x-value with binary search.
/// If the no Entry at the specified x-value is found, this method returns the Entry at the closest x-value.
/// nil if no Entry object at that x-value.
- (ChartDataEntry * _Nullable)entryForXValue:(double)xValue closestToY:(double)yValue SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// All Entry objects found at the given xIndex with binary search.
/// An empty array if no Entry object at that index.
- (NSArray<ChartDataEntry *> * _Nonnull)entriesForXValue:(double)xValue SWIFT_WARN_UNUSED_RESULT;
/// \param xValue x-value of the entry to search for
///
/// \param closestToY If there are multiple y-values for the specified x-value,
///
/// \param rounding Rounding method if exact value was not found
///
///
/// returns:
/// The array-index of the specified entry.
/// If the no Entry at the specified x-value is found, this method returns the index of the Entry at the closest x-value according to the rounding.
- (NSInteger)entryIndexWithX:(double)xValue closestToY:(double)yValue rounding:(enum ChartDataSetRounding)rounding SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)entryIndexWithEntry:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `firstIndex(of:)` or `lastIndex(of:)`");
- (BOOL)addEntry:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `append(_:)` instead", "append(_:)");
- (BOOL)addEntryOrdered:(ChartDataEntry * _Nonnull)e SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeEntry:(ChartDataEntry * _Nonnull)entry SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeFirst SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `func removeFirst() -> ChartDataEntry` instead.");
- (BOOL)removeLast SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `func removeLast() -> ChartDataEntry` instead.");
/// Removes all values from this DataSet and recalculates min and max value.
- (void)clear SWIFT_DEPRECATED_MSG("Use `removeAll(keepingCapacity:)` instead.");
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Charts38BarLineScatterCandleBubbleChartDataSet")
@interface BarLineScatterCandleBubbleChartDataSet : ChartDataSet <BarLineScatterCandleBubbleChartDataSetProtocol>
@property (nonatomic, strong) UIColor * _Nonnull highlightColor;
@property (nonatomic) CGFloat highlightLineWidth;
@property (nonatomic) CGFloat highlightLineDashPhase;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable highlightLineDashLengths;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS("_TtC6Charts9ChartData")
@interface ChartData : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSets:(NSArray<id <ChartDataSetProtocol>> * _Nonnull)dataSets OBJC_DESIGNATED_INITIALIZER;
/// Call this method to let the ChartData know that the underlying data has changed.
/// Calling this performs all necessary recalculations needed when the contained data has changed.
- (void)notifyDataChanged;
/// Sets a custom ValueFormatter for all DataSets this data object contains.
- (void)setValueFormatter:(id <ValueFormatter> _Nonnull)formatter;
/// Enables / disables drawing values (value-text) for all DataSets this data object contains.
- (void)setDrawValues:(BOOL)enabled;
@end






SWIFT_CLASS("_TtC6Charts18ChartDataEntryBase")
@interface ChartDataEntryBase : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC6Charts14ChartDataEntry")
@interface ChartDataEntry : ChartDataEntryBase <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// An Entry represents one single entry in the chart.
/// \param x the x value
///
/// \param y the y value (the actual value of the entry)
///
- (nonnull instancetype)initWithX:(double)x y:(double)y OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface ChartDataEntry (SWIFT_EXTENSION(Charts))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end



@interface ChartDataEntryBase (SWIFT_EXTENSION(Charts))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end







/// Determines how to round DataSet index values for <code>ChartDataSet.entryIndex(x, rounding)</code> when an exact x-value is not found.
typedef SWIFT_ENUM(NSInteger, ChartDataSetRounding, open) {
  ChartDataSetRoundingUp = 0,
  ChartDataSetRoundingDown = 1,
  ChartDataSetRoundingClosest = 2,
};


SWIFT_CLASS("_TtC6Charts16ChartHighlighter")
@interface ChartHighlighter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The limit line is an additional feature for all Line, Bar and ScatterCharts.
/// It allows the displaying of an additional line in the chart that marks a certain maximum / limit on the specified axis (x- or y-axis).
SWIFT_CLASS("_TtC6Charts14ChartLimitLine")
@interface ChartLimitLine : ComponentBase
/// limit / maximum (the y-value or xIndex)
@property (nonatomic) double limit;
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineDashLengths;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLimit:(double)limit OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_PROTOCOL("_TtP6Charts17ChartViewDelegate_")
@protocol ChartViewDelegate
/// Called when a value has been selected inside the chart.
/// \param entry The selected Entry.
///
/// \param highlight The corresponding highlight object that contains information about the highlighted position such as dataSetIndex etc.
///
- (void)chartValueSelected:(ChartViewBase * _Nonnull)chartView entry:(ChartDataEntry * _Nonnull)entry highlight:(Highlight * _Nonnull)highlight;
/// Called when a user stops panning between values on the chart
- (void)chartViewDidEndPanning:(ChartViewBase * _Nonnull)chartView;
- (void)chartValueNothingSelected:(ChartViewBase * _Nonnull)chartView;
- (void)chartScaled:(ChartViewBase * _Nonnull)chartView scaleX:(CGFloat)scaleX scaleY:(CGFloat)scaleY;
- (void)chartTranslated:(ChartViewBase * _Nonnull)chartView dX:(CGFloat)dX dY:(CGFloat)dY;
- (void)chartView:(ChartViewBase * _Nonnull)chartView animatorDidStop:(Animator * _Nonnull)animator;
@end



SWIFT_CLASS("_TtC6Charts16DataApproximator")
@interface DataApproximator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC6Charts25DefaultAxisValueFormatter")
@interface DefaultAxisValueFormatter : NSObject <AxisValueFormatter>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringForValue:(double)value axis:(AxisBase * _Nullable)axis SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Charts20DefaultFillFormatter")
@interface DefaultFillFormatter : NSObject <FillFormatter>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (CGFloat)getFillLinePositionWithDataSet:(id <LineChartDataSetProtocol> _Nonnull)dataSet dataProvider:(id <LineChartDataProvider> _Nonnull)dataProvider SWIFT_WARN_UNUSED_RESULT;
@end


/// Interface that allows custom formatting of all values inside the chart before they are drawn to the screen.
/// Simply create your own formatting class and let it implement ValueFormatter. Then override the stringForValue()
/// method and return whatever you want.
SWIFT_PROTOCOL("_TtP6Charts14ValueFormatter_")
@protocol ValueFormatter
/// Called when a value (from labels inside the chart) is formatted before being drawn.
/// For performance reasons, avoid excessive calculations and memory allocations inside this method.
/// \param value The value to be formatted
///
/// \param dataSetIndex The index of the DataSet the entry in focus belongs to
///
/// \param viewPortHandler provides information about the current chart state (scale, translation, …)
///
///
/// returns:
/// The formatted label ready to be drawn
- (NSString * _Nonnull)stringForValue:(double)value entry:(ChartDataEntry * _Nonnull)entry dataSetIndex:(NSInteger)dataSetIndex viewPortHandler:(ViewPortHandler * _Nullable)viewPortHandler SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumberFormatter;

/// The default value formatter used for all chart components that needs a default
SWIFT_CLASS("_TtC6Charts21DefaultValueFormatter")
@interface DefaultValueFormatter : NSObject <ValueFormatter>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFormatter:(NSNumberFormatter * _Nonnull)formatter OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringForValue:(double)value entry:(ChartDataEntry * _Nonnull)entry dataSetIndex:(NSInteger)dataSetIndex viewPortHandler:(ViewPortHandler * _Nullable)viewPortHandler SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Charts11Description")
@interface Description : ComponentBase
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6Charts4Fill_")
@protocol Fill
/// Draws the provided path in filled mode with the provided area
- (void)fillPathWithContext:(CGContextRef _Nonnull)context rect:(CGRect)rect;
@end



SWIFT_CLASS("_TtC6Charts9Highlight")
@interface Highlight : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface Highlight (SWIFT_EXTENSION(Charts))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Charts23IndexAxisValueFormatter")
@interface IndexAxisValueFormatter : NSObject <AxisValueFormatter>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)stringForValue:(double)value axis:(AxisBase * _Nullable)axis SWIFT_WARN_UNUSED_RESULT;
@end

enum LegendHorizontalAlignment : NSInteger;
enum LegendOrientation : NSInteger;
@class LegendEntry;

SWIFT_CLASS("_TtC6Charts6Legend")
@interface Legend : ComponentBase
/// The horizontal alignment of the legend
@property (nonatomic) enum LegendHorizontalAlignment horizontalAlignment;
/// The orientation of the legend
@property (nonatomic) enum LegendOrientation orientation;
@property (nonatomic, strong) UIFont * _Nonnull font;
@property (nonatomic) CGFloat xEntrySpace;
@property (nonatomic) CGFloat yEntrySpace;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// MARK: - Custom legend
/// Sets a custom legend’s entries array.
/// <ul>
///   <li>
///     A nil label will start a group.
///     This will disable the feature that automatically calculates the legend entries from the datasets.
///     Call <code>resetCustom(...)</code> to re-enable automatic calculation (and then <code>notifyDataSetChanged()</code> is needed).
///   </li>
/// </ul>
- (void)setCustomWithEntries:(NSArray<LegendEntry *> * _Nonnull)entries;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, LegendForm, "Form", open) {
/// Avoid drawing a form
  LegendFormNone = 0,
/// Do not draw the a form, but leave space for it
  LegendFormEmpty = 1,
/// Use default (default dataset’s form to the legend’s form)
  LegendFormDefault = 2,
/// Draw a square
  LegendFormSquare = 3,
/// Draw a circle
  LegendFormCircle = 4,
/// Draw a horizontal line
  LegendFormLine = 5,
};

typedef SWIFT_ENUM_NAMED(NSInteger, LegendHorizontalAlignment, "HorizontalAlignment", open) {
  LegendHorizontalAlignmentLeft = 0,
  LegendHorizontalAlignmentCenter = 1,
  LegendHorizontalAlignmentRight = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, LegendOrientation, "Orientation", open) {
  LegendOrientationHorizontal = 0,
  LegendOrientationVertical = 1,
};


SWIFT_CLASS("_TtC6Charts11LegendEntry")
@interface LegendEntry : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param label The legend entry text.
/// A <code>nil</code> label will start a group.
///
- (nonnull instancetype)initWithLabel:(NSString * _Nullable)label OBJC_DESIGNATED_INITIALIZER;
/// The legend entry text.
/// A <code>nil</code> label will start a group.
@property (nonatomic, copy) NSString * _Nullable label;
/// The color for drawing the label
@property (nonatomic, strong) UIColor * _Nullable labelColor;
/// Form size will be considered except for when .None is used
/// Set as NaN to use the legend’s default
@property (nonatomic) CGFloat formSize;
/// Line dash configuration for shapes that consist of lines.
/// This is how much (in pixels) into the dash pattern are we starting from.
/// Set to NaN to use the legend’s default.
@property (nonatomic) CGFloat formLineDashPhase;
/// The color for drawing the form
@property (nonatomic, strong) UIColor * _Nullable formColor;
@end


SWIFT_CLASS("_TtC6Charts14LegendRenderer")
@interface LegendRenderer : NSObject <Renderer>
@property (nonatomic, readonly, strong) ViewPortHandler * _Nonnull viewPortHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data object that encapsulates all data associated with a LineChart.
SWIFT_CLASS("_TtC6Charts13LineChartData")
@interface LineChartData : ChartData
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSets:(NSArray<id <ChartDataSetProtocol>> * _Nonnull)dataSets OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6Charts21LineChartDataProvider_")
@protocol LineChartDataProvider <BarLineScatterCandleBubbleChartDataProvider>
@property (nonatomic, readonly, strong) LineChartData * _Nullable lineData;
- (YAxis * _Nonnull)getAxis:(enum AxisDependency)axis SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6Charts42LineScatterCandleRadarChartDataSetProtocol_")
@protocol LineScatterCandleRadarChartDataSetProtocol <BarLineScatterCandleBubbleChartDataSetProtocol>
/// Enables / disables the horizontal highlight-indicator. If disabled, the indicator is not drawn.
@property (nonatomic) BOOL drawHorizontalHighlightIndicatorEnabled;
/// Enables / disables the vertical highlight-indicator. If disabled, the indicator is not drawn.
@property (nonatomic) BOOL drawVerticalHighlightIndicatorEnabled;
/// <code>true</code> if horizontal highlight indicator lines are enabled (drawn)
@property (nonatomic, readonly) BOOL isHorizontalHighlightIndicatorEnabled;
/// <code>true</code> if vertical highlight indicator lines are enabled (drawn)
@property (nonatomic, readonly) BOOL isVerticalHighlightIndicatorEnabled;
/// Enables / disables both vertical and horizontal highlight-indicators.
/// :param: enabled
- (void)setDrawHighlightIndicators:(BOOL)enabled;
@end


SWIFT_PROTOCOL("_TtP6Charts29LineRadarChartDataSetProtocol_")
@protocol LineRadarChartDataSetProtocol <LineScatterCandleRadarChartDataSetProtocol>
/// The color that is used for filling the line surface area.
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
///
/// returns:
/// The object that is used for filling the area below the line.
/// <em>default</em>: nil
@property (nonatomic, strong) id <Fill> _Nullable fill;
/// The alpha value that is used for filling the line surface.
/// <em>default</em>: 0.33
@property (nonatomic) CGFloat fillAlpha;
/// line width of the chart (min = 0.0, max = 10)
/// <em>default</em>: 1
@property (nonatomic) CGFloat lineWidth;
/// Set to <code>true</code> if the DataSet should be drawn filled (surface), and not just as a line.
/// Disabling this will give great performance boost.
/// Please note that this method uses the path clipping for drawing the filled area (with images, gradients and layers).
@property (nonatomic) BOOL drawFilledEnabled;
/// <code>true</code> if filled drawing is enabled, <code>false</code> if not
@property (nonatomic, readonly) BOOL isDrawFilledEnabled;
@end

enum LineChartDataSetMode : NSInteger;

SWIFT_PROTOCOL("_TtP6Charts24LineChartDataSetProtocol_")
@protocol LineChartDataSetProtocol <LineRadarChartDataSetProtocol>
/// The drawing mode for this line dataset
/// <em>default</em>: Linear
@property (nonatomic) enum LineChartDataSetMode mode;
/// Intensity for cubic lines (min = 0.05, max = 1)
/// <em>default</em>: 0.2
@property (nonatomic) CGFloat cubicIntensity;
/// If true, gradient lines are drawn instead of solid
@property (nonatomic) BOOL isDrawLineWithGradientEnabled;
/// The points where gradient should change color
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable gradientPositions;
/// The radius of the drawn circles.
@property (nonatomic) CGFloat circleRadius;
/// The hole radius of the drawn circles.
@property (nonatomic) CGFloat circleHoleRadius;
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull circleColors;
///
/// returns:
/// The color at the given index of the DataSet’s circle-color array.
/// Performs a IndexOutOfBounds check by modulus.
- (UIColor * _Nullable)getCircleColorAtIndex:(NSInteger)atIndex SWIFT_WARN_UNUSED_RESULT;
/// Sets the one and ONLY color that should be used for this DataSet.
/// Internally, this recreates the colors array and adds the specified color.
- (void)setCircleColor:(UIColor * _Nonnull)color;
/// Resets the circle-colors array and creates a new one
- (void)resetCircleColors:(NSInteger)index;
/// If true, drawing circles is enabled
@property (nonatomic) BOOL drawCirclesEnabled;
/// <code>true</code> if drawing circles for this DataSet is enabled, <code>false</code> ifnot
@property (nonatomic, readonly) BOOL isDrawCirclesEnabled;
/// The color of the inner circle (the circle-hole).
@property (nonatomic, strong) UIColor * _Nullable circleHoleColor;
/// <code>true</code> if drawing circles for this DataSet is enabled, <code>false</code> ifnot
@property (nonatomic) BOOL drawCircleHoleEnabled;
/// <code>true</code> if drawing the circle-holes is enabled, <code>false</code> ifnot.
@property (nonatomic, readonly) BOOL isDrawCircleHoleEnabled;
/// This is how much (in pixels) into the dash pattern are we starting from.
@property (nonatomic, readonly) CGFloat lineDashPhase;
/// This is the actual dash pattern.
/// I.e. [2, 3] will paint [–   –   ]
/// [1, 3, 4, 2] will paint [-   ––  -   ––  ]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineDashLengths;
/// Line cap type, default is CGLineCap.Butt
@property (nonatomic) CGLineCap lineCapType;
/// Sets a custom FillFormatterProtocol to the chart that handles the position of the filled-line for each DataSet. Set this to null to use the default logic.
@property (nonatomic, strong) id <FillFormatter> _Nullable fillFormatter;
@end


SWIFT_CLASS("_TtC6Charts34LineScatterCandleRadarChartDataSet")
@interface LineScatterCandleRadarChartDataSet : BarLineScatterCandleBubbleChartDataSet <LineScatterCandleRadarChartDataSetProtocol>
/// Enables / disables the horizontal highlight-indicator. If disabled, the indicator is not drawn.
@property (nonatomic) BOOL drawHorizontalHighlightIndicatorEnabled;
/// Enables / disables the vertical highlight-indicator. If disabled, the indicator is not drawn.
@property (nonatomic) BOOL drawVerticalHighlightIndicatorEnabled;
/// <code>true</code> if horizontal highlight indicator lines are enabled (drawn)
@property (nonatomic, readonly) BOOL isHorizontalHighlightIndicatorEnabled;
/// <code>true</code> if vertical highlight indicator lines are enabled (drawn)
@property (nonatomic, readonly) BOOL isVerticalHighlightIndicatorEnabled;
/// Enables / disables both vertical and horizontal highlight-indicators.
/// :param: enabled
- (void)setDrawHighlightIndicators:(BOOL)enabled;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts21LineRadarChartDataSet")
@interface LineRadarChartDataSet : LineScatterCandleRadarChartDataSet <LineRadarChartDataSetProtocol>
/// The color that is used for filling the line surface area.
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
/// The object that is used for filling the area below the line.
/// <em>default</em>: nil
@property (nonatomic, strong) id <Fill> _Nullable fill;
/// The alpha value that is used for filling the line surface,
/// <em>default</em>: 0.33
@property (nonatomic) CGFloat fillAlpha;
/// line width of the chart (min = 0.0, max = 10)
/// <em>default</em>: 1
@property (nonatomic) CGFloat lineWidth;
/// Set to <code>true</code> if the DataSet should be drawn filled (surface), and not just as a line.
/// Disabling this will give great performance boost.
/// Please note that this method uses the path clipping for drawing the filled area (with images, gradients and layers).
@property (nonatomic) BOOL drawFilledEnabled;
/// <code>true</code> if filled drawing is enabled, <code>false</code> ifnot
@property (nonatomic, readonly) BOOL isDrawFilledEnabled;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts16LineChartDataSet")
@interface LineChartDataSet : LineRadarChartDataSet <LineChartDataSetProtocol>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The drawing mode for this line dataset
/// <em>default</em>: Linear
@property (nonatomic) enum LineChartDataSetMode mode;
/// Intensity for cubic lines (min = 0.05, max = 1)
/// <em>default</em>: 0.2
@property (nonatomic) CGFloat cubicIntensity;
@property (nonatomic) BOOL isDrawLineWithGradientEnabled;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable gradientPositions;
/// The radius of the drawn circles.
@property (nonatomic) CGFloat circleRadius;
/// The hole radius of the drawn circles
@property (nonatomic) CGFloat circleHoleRadius;
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull circleColors;
///
/// returns:
/// The color at the given index of the DataSet’s circle-color array.
/// Performs a IndexOutOfBounds check by modulus.
- (UIColor * _Nullable)getCircleColorAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Sets the one and ONLY color that should be used for this DataSet.
/// Internally, this recreates the colors array and adds the specified color.
- (void)setCircleColor:(UIColor * _Nonnull)color;
/// Resets the circle-colors array and creates a new one
- (void)resetCircleColors:(NSInteger)index;
/// If true, drawing circles is enabled
@property (nonatomic) BOOL drawCirclesEnabled;
/// <code>true</code> if drawing circles for this DataSet is enabled, <code>false</code> ifnot
@property (nonatomic, readonly) BOOL isDrawCirclesEnabled;
/// The color of the inner circle (the circle-hole).
@property (nonatomic, strong) UIColor * _Nullable circleHoleColor;
/// <code>true</code> if drawing circles for this DataSet is enabled, <code>false</code> ifnot
@property (nonatomic) BOOL drawCircleHoleEnabled;
/// <code>true</code> if drawing the circle-holes is enabled, <code>false</code> ifnot.
@property (nonatomic, readonly) BOOL isDrawCircleHoleEnabled;
/// This is how much (in pixels) into the dash pattern are we starting from.
@property (nonatomic) CGFloat lineDashPhase;
/// This is the actual dash pattern.
/// I.e. [2, 3] will paint [–   –   ]
/// [1, 3, 4, 2] will paint [-   ––  -   ––  ]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineDashLengths;
/// Line cap type, default is CGLineCap.Butt
@property (nonatomic) CGLineCap lineCapType;
/// Sets a custom FillFormatterProtocol to the chart that handles the position of the filled-line for each DataSet. Set this to null to use the default logic.
@property (nonatomic, strong) id <FillFormatter> _Nullable fillFormatter;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, LineChartDataSetMode, "Mode", open) {
  LineChartDataSetModeLinear = 0,
  LineChartDataSetModeStepped = 1,
  LineChartDataSetModeCubicBezier = 2,
  LineChartDataSetModeHorizontalBezier = 3,
};




/// Chart that draws lines, surfaces, circles, …
SWIFT_CLASS("_TtC6Charts13LineChartView")
@interface LineChartView : BarLineChartViewBase <LineChartDataProvider>
@property (nonatomic, readonly, strong) LineChartData * _Nullable lineData;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end








SWIFT_CLASS("_TtC6Charts18LinearGradientFill")
@interface LinearGradientFill : NSObject <Fill>
- (nonnull instancetype)initWithGradient:(CGGradientRef _Nonnull)gradient angle:(CGFloat)angle OBJC_DESIGNATED_INITIALIZER;
- (void)fillPathWithContext:(CGContextRef _Nonnull)context rect:(CGRect)rect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Charts10MarkerView")
@interface MarkerView : NSUIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A simple abstraction over UIAccessibilityElement and NSAccessibilityElement.
SWIFT_CLASS("_TtC6Charts24NSUIAccessibilityElement")
@interface NSUIAccessibilityElement : UIAccessibilityElement
- (nonnull instancetype)initWithAccessibilityContainer:(id _Nonnull)container OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) CGRect accessibilityFrame;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface NSUIView (SWIFT_EXTENSION(Charts))
/// An array of accessibilityElements that is used to implement UIAccessibilityContainer internally.
/// Subclasses <em>MUST</em> override this with an array of such elements.
- (NSArray * _Nullable)accessibilityChildren SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL isAccessibilityElement;
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSUIView (SWIFT_EXTENSION(Charts))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)nsuiTouchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;
@end


SWIFT_CLASS("_TtC6Charts5Range")
@interface Range : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC6Charts11Transformer")
@interface Transformer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end












/// Class that contains information about the charts current viewport settings, including offsets, scale & translation levels, …
SWIFT_CLASS("_TtC6Charts15ViewPortHandler")
@interface ViewPortHandler : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Charts11ViewPortJob")
@interface ViewPortJob : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum XAxisLabelPosition : NSInteger;

SWIFT_CLASS("_TtC6Charts5XAxis")
@interface XAxis : AxisBase
/// This is the angle for drawing the X axis labels (in degrees)
@property (nonatomic) CGFloat labelRotationAngle;
/// if set to true, the chart will avoid that the first and last label entry in the chart “clip” off the edge of the chart
@property (nonatomic) BOOL avoidFirstLastClippingEnabled;
/// the position of the x-labels relative to the chart
@property (nonatomic) enum XAxisLabelPosition labelPosition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, XAxisLabelPosition, "LabelPosition", open) {
  XAxisLabelPositionTop = 0,
  XAxisLabelPositionBottom = 1,
  XAxisLabelPositionBothSided = 2,
  XAxisLabelPositionTopInside = 3,
  XAxisLabelPositionBottomInside = 4,
};


SWIFT_CLASS("_TtC6Charts13XAxisRenderer")
@interface XAxisRenderer : NSObject
@property (nonatomic, readonly, strong) ViewPortHandler * _Nonnull viewPortHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing the y-axis labels settings and its entries.
/// Be aware that not all features the YLabels class provides are suitable for the RadarChart.
/// Customizations that affect the value range of the axis need to be applied before setting data for the chart.
SWIFT_CLASS("_TtC6Charts5YAxis")
@interface YAxis : AxisBase
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum that specifies the axis a DataSet should be plotted against, either Left or Right.
typedef SWIFT_ENUM(NSInteger, AxisDependency, open) {
  AxisDependencyLeft = 0,
  AxisDependencyRight = 1,
};


SWIFT_CLASS("_TtC6Charts13YAxisRenderer")
@interface YAxisRenderer : NSObject
@property (nonatomic, readonly, strong) ViewPortHandler * _Nonnull viewPortHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Charts11ZoomViewJob")
@interface ZoomViewJob : ViewPortJob
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
